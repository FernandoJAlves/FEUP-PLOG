
/* nth1 can be used */
getLinha(1,[Linha|_],Linha).
getLinha(N,[_|Resto],Linha) :-
    N > 1,
    Next is N-1,
    getLinha(Next, Resto, Linha).

getPeca(Nlinha,Ncoluna,Tabuleiro,Peca).
getPeca(Nlinha,Ncoluna,Tabuleiro,Peca) :-
    getLinha(Nlinha,Tabuleiro,Linha),
    getColuna(Ncoluna,Linha,Peca).

setPeca(Nlinha, Ncoluna, Peca, TabIn, TabOut).
setPeca(Nlinha, Ncolunas, Peca, TabIn, TabOut) :-
    setPecaLinha(Nlinha, Ncolunas, Peca, TabIn, TabOut).

setPecaLinha(1, Ncolunas, Peca, [Linha|MaisLinhas],[NovaLinha|MaisLinhas]) :-
    setPecaColuna(Ncolunas, Peca, Linha, NovaLinha).

setPecaLinha(N, Ncolunas, Peca, [Linha|MaisLinhas], [Linha|NovasLinhas]) :-
    N > 1,
    Next is N-1,
    setPecaLinha(Next, Ncolunas, Peca, MaisLinhas, NovasLinhas).

setPecaColuna(1, Peca, [_|Resto], [Peca|Resto]).
setPecaColuna(N, Peca, [Peca1|Resto], [Peca1|Mais]) :-
    N > 1,
    Next is N-1,
    setPecaColuna(Next, Peca, Resto, Mais).

///////////////////////////////////////

append([], lista, lista).
append([H|T], lista, [H|Resto]):-
    append(T, lista, Resto).

reverse([],[]).
reverse([X|Resto], Invertida):-
    reverse(Resto, RestoInv),
    append(RestoInv, [X], Invertida).



/////////////////////////////////////////


slice(Lista, Pos1, Pos2, Resultado).

/* ex: slice([1,2,3,4,5,6,7], 3, 6, L)
        L = [3,4,5,6]                   */


